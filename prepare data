import os
import librosa
import math
import json
import numpy as np
import scipy
import copy
import pandas as pd
import antropy as ant

DATASET_PATH = "D:/Test/small"
JSON_PATH = "../ResNet50/data_mfcc_small_DA10.json"

def save_mfcc(dataset_path, json_path, n_mfcc=13, n_fft=2048, hop_length=512):
    tot=0
    healthy_tot=0
    unhealthy_tot=0
    data={
        "mapping": [],
        "mfcc": [],
        "labels": []
    }

    for i, (dirpath, dirname, filenames) in enumerate (os.walk(dataset_path)):
        if dirpath is not dataset_path:
            dirpath_components = dirpath.split("\\")
            semantic_label = dirpath_components[-1]
            data["mapping"].append(semantic_label)
            print("\nProcessing: {}".format(semantic_label))

            for f in filenames:
                file_path = os.path.join(dirpath, f)
                signal, sr = librosa.load(file_path, sr=None)
                if (sr != 48000):
                    print(sr)
                    continue

                samples_per_track = len(signal)
                num_samples_per_segment = 3 * sr
                expected_num_mfcc_per_segment = math.ceil(num_samples_per_segment / hop_length)
                num_segments = int(samples_per_track/num_samples_per_segment)
                this_tot = 0
                for ii in range(10):
                    bias = ii * 4800
                    for s in range(num_segments):
                        start_sample = num_samples_per_segment * s + bias
                        finish_sample = min(start_sample + num_samples_per_segment, samples_per_track)

                        mfcc = librosa.feature.mfcc(signal[start_sample:finish_sample],
                                                    sr=sr,
                                                    n_fft=n_fft,
                                                    n_mfcc=n_mfcc,
                                                    hop_length=hop_length,
                        )

                        mfcc = mfcc.T

                        if len(mfcc) == expected_num_mfcc_per_segment:
                            this_tot+=1
                            data["mfcc"].append(mfcc.tolist())
                            data["labels"].append(i-1)
                            tot+=1
                            if i-1 == 0:
                                healthy_tot+=1
                            else:
                                unhealthy_tot+=1
                            print("{}, segment:{}".format(file_path, this_tot))
                        else:
                            print(len(mfcc))

    with open(json_path, "w") as fp:
        json.dump(data, fp, indent=4)

    print(f"There are {tot} segments\nHealthy: {healthy_tot}\nUnhealthy: {unhealthy_tot}")

if __name__ == "__main__":
    save_mfcc(DATASET_PATH, JSON_PATH)
